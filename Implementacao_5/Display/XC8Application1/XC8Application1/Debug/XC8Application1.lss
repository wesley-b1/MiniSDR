
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a28  00000000  00000000  0000021f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000672  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000307  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ae  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000150  00000150  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 0000002e  000000f8  000000f8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_data 00000046  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_init 0000000e  00000126  00000126  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_off_cursor 0000000e  00000134  00000134  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_on_cursor 0000000e  00000142  00000142  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000032  000000c6  000000c6  0000011a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
   8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
   c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000150 <__bad_interrupt>:
 150:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_cmd:

000000f8 <lcd_cmd>:
#define AUXPORTB PORTB

#include <xc.h>
void lcd_cmd(unsigned char cmd){
	
	PORTB &= 0xF0;
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	90 7f       	andi	r25, 0xF0	; 240
  fc:	95 b9       	out	0x05, r25	; 5
	PORTB |= cmd;
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	89 2b       	or	r24, r25
 102:	85 b9       	out	0x05, r24	; 5
	
	//PORTC &= 0xFC;
	//PORTC |= 0x01;
	PORTB |= (1<<PORTB4); //SETANDO O ENABLE
 104:	85 b1       	in	r24, 0x05	; 5
 106:	80 61       	ori	r24, 0x10	; 16
 108:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB5);//RESETANDO O RS
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8f 7d       	andi	r24, 0xDF	; 223
 10e:	85 b9       	out	0x05, r24	; 5
	for(int i = 0;i<255;i++){}//Delay
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <lcd_cmd+0x20>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	8f 3f       	cpi	r24, 0xFF	; 255
 11a:	91 05       	cpc	r25, r1
 11c:	e4 f3       	brlt	.-8      	; 0x116 <lcd_cmd+0x1e>
	//PORTC &=~ 0x01;
	PORTB &= ~(1<<PORTB4); //RESETANDO O ENABLE
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

Disassembly of section .text.lcd_data:

00000080 <lcd_data>:
}

void lcd_data(unsigned char data){
	//PORTC &= 0xFC;
	//PORTC |= 0x02;
	PORTB |= (1<<PORTB5); //SETANDO O RS
  80:	95 b1       	in	r25, 0x05	; 5
  82:	90 62       	ori	r25, 0x20	; 32
  84:	95 b9       	out	0x05, r25	; 5
	
	
	for(int i=0; i<2 ;i++){
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	16 c0       	rjmp	.+44     	; 0xb8 <lcd_data+0x38>
		PORTB &= 0xF0;
  8c:	95 b1       	in	r25, 0x05	; 5
  8e:	90 7f       	andi	r25, 0xF0	; 240
  90:	95 b9       	out	0x05, r25	; 5
		PORTB |= data;
  92:	95 b1       	in	r25, 0x05	; 5
  94:	98 2b       	or	r25, r24
  96:	95 b9       	out	0x05, r25	; 5
		
		//PORTC &= 0xFC;
		//PORTC |= 0x03;
		PORTB |= (1<<PORTB4);//ENABLE EM 1
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	90 61       	ori	r25, 0x10	; 16
  9c:	95 b9       	out	0x05, r25	; 5
		for(int j = 0;j<255;j++){}//Delay
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <lcd_data+0x28>
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	2f 3f       	cpi	r18, 0xFF	; 255
  aa:	31 05       	cpc	r19, r1
  ac:	dc f3       	brlt	.-10     	; 0xa4 <lcd_data+0x24>
		//PORTC &=~ 0x01;	
		PORTB &= ~(1<<PORTB4);//ENABLE EM 0
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	9f 7e       	andi	r25, 0xEF	; 239
  b2:	95 b9       	out	0x05, r25	; 5
	//PORTC &= 0xFC;
	//PORTC |= 0x02;
	PORTB |= (1<<PORTB5); //SETANDO O RS
	
	
	for(int i=0; i<2 ;i++){
  b4:	4f 5f       	subi	r20, 0xFF	; 255
  b6:	5f 4f       	sbci	r21, 0xFF	; 255
  b8:	42 30       	cpi	r20, 0x02	; 2
  ba:	51 05       	cpc	r21, r1
  bc:	3c f3       	brlt	.-50     	; 0x8c <lcd_data+0xc>
		for(int j = 0;j<255;j++){}//Delay
		//PORTC &=~ 0x01;	
		PORTB &= ~(1<<PORTB4);//ENABLE EM 0
	}
	//PORTC &=~ 0x02;	
	PORTB &= ~(1<<PORTB5);//RESETANDO O RS
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	08 95       	ret

Disassembly of section .text.lcd_init:

00000126 <lcd_init>:
	lcd_cmd(data[4]);
}*/
void lcd_init(){
	//RS = 0 D7:D4 = 0010
	//RS = 0 D7:D4 = 1000
	lcd_cmd(0x02);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
	lcd_cmd(0x08);
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
 132:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

00000134 <lcd_off_cursor>:
}

void lcd_off_cursor(){
	//RS = 0 D7:D4 = 0000
	//RS = 0 D7:D4 = 1100
	lcd_cmd(0x00);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
	lcd_cmd(0x0C);
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
 140:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

00000142 <lcd_on_cursor>:
}

void lcd_on_cursor(){
	//RS = 0 D7:D4 = 0000
	//RS = 0 D7:D4 = 1100
	lcd_cmd(0x00);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
	lcd_cmd(0x0F);
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
 14e:	08 95       	ret

Disassembly of section .text.main:

000000c6 <main>:



int main(void)
{
	DDRB = 0xff;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
  ca:	87 b9       	out	0x07, r24	; 7
	PORTB = 0xF8;
  cc:	88 ef       	ldi	r24, 0xF8	; 248
  ce:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xAF;
  d0:	8f ea       	ldi	r24, 0xAF	; 175
  d2:	88 b9       	out	0x08, r24	; 8
	lcd_init();
  d4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_init>
	lcd_off_cursor();
  d8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_off_cursor>
	lcd_cmd(0x87);
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
	lcd_cmd(0x87);
  e2:	87 e8       	ldi	r24, 0x87	; 135
  e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_cmd>
	lcd_on_cursor();
  e8:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_on_cursor>
	lcd_data(0x14);
  ec:	84 e1       	ldi	r24, 0x14	; 20
  ee:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
    
}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
